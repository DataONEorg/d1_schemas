<?xml version="1.0" encoding="UTF-8"?>
<xs:schema  targetNamespace="http://ns.dataone.org/service/types/v1"
    xmlns:d1="http://ns.dataone.org/service/types/v1"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    version="1.0.0"
    elementFormDefault="unqualified" attributeFormDefault="unqualified">

<!-- ************************************
        DEFINE REUSABLE SIMPLE TYPES HERE 
        ************************************ -->
    
    <!-- Checksum Algorithm -->
  <xs:simpleType name="ChecksumAlgorithm">
    <xs:annotation>
      <xs:documentation>The checksum algorithm used to calculate a checksum.
      DataONE will publish a known list of algorithm names that can be supported,
      but compliant implementations must support at least SHA-1. 
      </xs:documentation>
        <xs:documentation>Valid entries include: SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, MD5</xs:documentation>
        <xs:documentation>The default checksum is *SHA-1*.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
    </xs:restriction>
  </xs:simpleType> 
    
    <!-- CrontabEntry -->
    <xs:simpleType name="CrontabEntry">
        <xs:annotation><xs:documentation>A single value in the series that forms a single crontab entry, following the
        syntax conventions defined by the Quartz Scheduler (http://www.quartz-scheduler.org/api/2.1.0/org/quartz/CronExpression.html).</xs:documentation></xs:annotation>
        <xs:restriction base="xs:token">
            <xs:pattern value="([\?\*\d]{1,2}[\-,]?)+"/>
        </xs:restriction>
    </xs:simpleType> 
    
    <!-- Event Enumeration -->
    <xs:simpleType name="Event">
      <xs:annotation>
      <xs:documentation>The controlled list of events that are logged, 
      which will include 'CREATE', 'UPDATE', 'DELETE', 'READ', 'REPLICATE',
      'SYNCHRONIZATION_FAILED' and 'REPLICATION_FAILED' events.</xs:documentation>
      </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="create"/>
            <xs:enumeration value="read"/>
            <xs:enumeration value="update"/>
            <xs:enumeration value="delete"/>
            <xs:enumeration value="replicate"/>
            <xs:enumeration value="synchronization_failed"/>
            <xs:enumeration value="replication_failed"/>
        </xs:restriction>
    </xs:simpleType>
    
    <!-- Node State -->
    <xs:simpleType name="NodeState">
    	<xs:annotation>
	      	<xs:documentation>
	      	An indicator of the current node accessibility.  Nodes that are marked "down"
	      	are inaccessible for service operations,  those that are "up" are in the
	      	normal accessible state, and "unknown" indicates that the state has not been
	      	determined yet.
	      	</xs:documentation>
      	</xs:annotation>
        <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="up"/>
            <xs:enumeration value="down"/>
            <xs:enumeration value="unknown"/>
        </xs:restriction>
    </xs:simpleType>
    
    <!-- Node Type Enumeration -->
    <xs:simpleType name="NodeType">
        <xs:annotation>
	      	<xs:documentation>
	      	The type of this node, which is either "mn" for Member Nodes, and
	      	and "cn" for Coordinating Nodes.
	    	</xs:documentation>
      	</xs:annotation>
        <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="mn"/>
            <xs:enumeration value="cn"/>
            <xs:enumeration value="Monitor"/>
        </xs:restriction>
    </xs:simpleType>
    
    <!-- Non-Empty String -->
    <xs:simpleType name="NonEmptyString">
      <xs:annotation>
      <xs:documentation>A derived string type with at least length 1 and it must contain non-whitespace.</xs:documentation>
      </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:minLength value="1"/>
            <xs:pattern value="[\s]*[\S][\s\S]*"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Object Format Identifier -->
    <xs:simpleType name="ObjectFormatIdentifier">
        <xs:annotation>
          <xs:documentation>A string used to identify an instance of :class:`Types.ObjectFormat` and MUST
          be unique within an instance of :class:`Types.ObjectFormatList`.
          </xs:documentation>
        </xs:annotation>
        <xs:restriction base="d1:NonEmptyString"></xs:restriction>
    </xs:simpleType>
        
    <!-- NonEmptyString800 -->
    <xs:simpleType name="NonEmptyString800">
        <xs:annotation>
          <xs:documentation> An NonEmptyString800 is a NonEmptyString string 
          with a maximum length of 800.
          </xs:documentation>
        </xs:annotation>
        <xs:restriction base="d1:NonEmptyString">
          <xs:maxLength value="800"></xs:maxLength>
        </xs:restriction>
    </xs:simpleType>
    
    <!-- Permission = permitted action -->
  <xs:simpleType name="Permission">
    <xs:annotation>
      <xs:documentation>A string value indicating the set of actions that
        can be performed on a resource as specified in an access policy. The
        set of permissions include the ability to read a resource (read), modify a
        resource (write), and to change the set of access control policies
        for a resource (changePermission). In addition, there is a 
        permission that controls the ability of a node to receive a replica of
        an object from another node (replicate).
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="read" />
      <xs:enumeration value="write" />
      <xs:enumeration value="changePermission" />
      <xs:enumeration value="replicate" />
    </xs:restriction>
  </xs:simpleType>
    
    <!-- Replication Status -->
  <xs:simpleType name="ReplicationStatus">
    <xs:annotation>
      <xs:documentation>A controlled string value indicating the current
      state of a replica of an object.  When an object 
      identified needs to be replicated, it is added to the replication
      task queue and is marked as 'queued'; a CN node will then pick up 
      that task and request that it be replicated to a MN and marks that it
      is 'requested'; when a MN finishes replicating the object, it informs
      the CN that it is finished and it is marked as 'completed'; periodically
      the CN checks each replica to be sure it is both available and valid 
      (matching checksum with original), and if it is either unavailable or 
      invalid then it marks it as 'invalidated', which indicates that the 
      replication policy needs to be checked again. 
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="queued" />
      <xs:enumeration value="requested" />
      <xs:enumeration value="completed" />
      <xs:enumeration value="invalidated" />
    </xs:restriction>
  </xs:simpleType>

    <!-- Service Name -->
    <xs:simpleType name="ServiceName">
        <xs:annotation>
	      	<xs:documentation>
	      	The name of a service that is available on a Node.
	    	</xs:documentation>
      	</xs:annotation>
        <xs:restriction base="d1:NonEmptyString"/>
    </xs:simpleType>
    
    
    <!-- Service Version -->
    <xs:simpleType name="ServiceVersion">
        <xs:annotation>
	      	<xs:documentation>
	      	The version of a service that is available on a Node, expressed using
	      	the symbolic service level that that service implements, such as "v1" or
	      	"v2".  DataONE services are released only as major service versions; patches
	      	to services are not indicated in this version label. 
	    	</xs:documentation>
      	</xs:annotation>
        <xs:restriction base="d1:NonEmptyString"/>
    </xs:simpleType>

    <!-- ***************************************
            DEFINE REUSABLE COMPLEX  TYPES HERE 
            *************************************** -->
    
    <!-- NOTE THAT ALL SERIALIZEABLE ROOT ELEMENTS FOR MESSAGES SHOULD BE OF A COMPLEX TYPE -->

    <!-- AccessPolicy -->
    <xs:complexType name="AccessPolicy">
        <xs:annotation>
            <xs:documentation>A set of rules that specifies as a whole the allowable permissions that a
                given user, group, or system has for accessing a resource, including both data and
                metadata resources and service resources. An access policy consists of a
                sequence of allow rules that grant permissions to principals, which can be
                individual users, groups of users, symbolic users, or systems and services.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="allow" type="d1:AccessRule" 
                minOccurs="1" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>
    
    <!-- AccessRule -->
    <xs:complexType name="AccessRule">
        <xs:annotation>
            <xs:documentation>A rule that is used to allow a :term:`subject` to perform an action (such as
                read or write) on an object in DataONE. Rules are tuples (subject,
                permission) specifying which permissions are allowed for the subjects(s).
                The resource on which the access control rules are being applied is
                determined by the containing SystemMetadata document, or in the case of
                methods such as :func:`CNAuthorization.setAccessPolicy`, by the *pid* in the
                method parameters.</xs:documentation>
            <xs:documentation>Access control rules are specified by the :term:`Origin Member Node` when the
                object is first registered in DataONE. If no rules are specified at that
                time, then the object is deemed to be private and the only user with access
                to the object (read, write, or otherwise) is the :term:`Rights Holder`.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="subject" type="d1:Subject" 
                      minOccurs="1" maxOccurs="unbounded" />
          <xs:element name="permission" type="d1:Permission" 
                      minOccurs="1" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>
    
    <!-- Checksum -->
    <xs:complexType name="Checksum">
        <xs:annotation><xs:documentation>Represents the value of a computed checksum.</xs:documentation></xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="algorithm" type="d1:ChecksumAlgorithm"
                    use="required"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <!-- Group -->
    <xs:complexType name="Group">
        <xs:annotation><xs:documentation>Group represents metadata about a Subject that represents a collection of other Subjects.
            Groups are convenient ways to express access rules for certain roles that are not necessarily tied to particular people over time.</xs:documentation></xs:annotation>
        <xs:sequence>
            <xs:element name="subject" type="d1:Subject" minOccurs="1" maxOccurs="1" >
                <xs:annotation><xs:documentation>The unique, immutable identifier of the group. 
                Group subjects must not be reused, and so they are both immutable and can not be 
                deleted from the DataONE system.
                </xs:documentation></xs:annotation>
            </xs:element>
            <xs:element name="groupName" type="d1:NonEmptyString" 
                minOccurs="1" maxOccurs="1" ><xs:annotation><xs:documentation>The name of the Group.</xs:documentation></xs:annotation></xs:element>
            <xs:element name="hasMember" type="d1:Subject" 
                minOccurs="0" maxOccurs="unbounded" ><xs:annotation><xs:documentation>A Subject that is a member of this group, expressed using the
                    unique identifier for that Subject.</xs:documentation></xs:annotation>
            </xs:element>
			<xs:element name="rightsHolder" type="d1:Subject" minOccurs="1" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Represents the list of owners of this group. All groups are readable by 
					anyone in the DataONE system, but can only be modified by subjects listed in rightsHolder fields.
					Designation as a rightsHolder allows the subject, or their equivalent identities, to make changes
					to the mutable properties of the group, including its name and membership list and rights holder list.
					The subject of the Group itself immutable.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
        </xs:sequence>
    </xs:complexType>
    
    <!-- Identifier  -->
    <xs:complexType name="Identifier">
        <xs:annotation>
          <xs:documentation>An :term:`identifier` (:term:`PID`) in the DataONE system. This is
                            equivalent to a Unicode string of printable characters, excluding
                            whitespace. All representations of identifiers must be encoded in 7-bit
                            ASCII or UTF-8.
          </xs:documentation>
          <xs:documentation>Identifiers have a maximum length of 800 characters, and a variety of other properties
                            designed for preservation and longevity. Some discussion on this
                            is described in the `PID documentation`_ and in decision `ticket 577`_.
          </xs:documentation>
          <xs:documentation>.. _ticket 577: https://redmine.dataone.org/issues/577
          </xs:documentation>
          <xs:documentation>.. _PID documentation: http://mule1.dataone.org/ArchitectureDocs-current/design/PIDs.html
          </xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="d1:NonEmptyString800">
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    
    <!--  Log -->
  <xs:complexType name="Log">
      <xs:annotation>
        <xs:documentation>Represents a collection of LogEntry elements, used to transfer log information between DataONE components. 
        </xs:documentation>    
      </xs:annotation>
    <xs:complexContent>
      <xs:extension base="d1:Slice">
        <xs:sequence>
          <xs:element name="logEntry" type="d1:LogEntry"
            minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
        
    <!-- Log Entry -->
    <xs:complexType name="LogEntry">
        <xs:annotation>
            <xs:documentation>A single log entry as reported by a Member Node or Coordinating Node through
                the :func:`MNCore.getLogRecords` and :func:`CNCore.getLogRecords` methods.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="entryId" type="d1:NonEmptyString" 
                minOccurs="1" maxOccurs="1"/>
            <xs:element name="identifier" type="d1:Identifier" 
                minOccurs="1" maxOccurs="1"/>
            <xs:element name="ipAddress" type="xs:string"
                minOccurs="1" maxOccurs="1"/>
            <xs:element name="userAgent" type="xs:string"
                minOccurs="1" maxOccurs="1"/>
            <xs:element name="subject" type="d1:Subject"
                minOccurs="1" maxOccurs="1"/>
            <xs:element name="event" type="d1:Event"
                minOccurs="1" maxOccurs="1"/>
            <xs:element name="dateLogged" type="xs:dateTime"
                minOccurs="1" maxOccurs="1"/>
            <xs:element name="nodeIdentifier" type="d1:NodeReference"
                minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>
    
    <!-- Monitor Info -->
    <xs:complexType name="MonitorInfo">
        <xs:annotation>
          <xs:documentation>A single log entry as reported by a 
          Member Node or Coordinating Node through the getMonitorInfos methods.
          </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="date" type="xs:date" minOccurs="1" maxOccurs="1"/>
            <xs:element name="count" type="xs:int" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>
    
    <!-- Monitor List -->
    <xs:complexType name="MonitorList">
        <xs:sequence>
            <xs:element name="monitorInfo" type="d1:MonitorInfo" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    
    <!-- Node -->
    <xs:complexType name="Node">
        <xs:annotation>
            <xs:documentation>A set of values that describe a member or coordinating node, its Internet location, and the services it
                supports. Several nodes may exist on a single physical device or hostname.
            </xs:documentation>
        </xs:annotation>
        
        <xs:sequence>
            <xs:element name="identifier" type="d1:NodeReference" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>A unique identifier for the node. This may initially be the same as the
                        baseURL, however this value should not change for future implementations of the same
                        node, whereas the baseURL may change in the future. 
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="name" type="d1:NonEmptyString" minOccurs="1" maxOccurs="1" >
                <xs:annotation>
                    <xs:documentation>A human readable name of the Node. This name can be used as a label in many systems
                    to represent the node, and thus should be short but understandable.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            
            <xs:element name="description" type="d1:NonEmptyString" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>Description of a Node, explaining the community it serves and other
                        relevant information about the node, such as what content is maintained by this node
                        and any other free style notes.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="baseURL" type="xs:anyURI" minOccurs="1" maxOccurs="1"/>
            <xs:element name="services" type="d1:Services" minOccurs="0" maxOccurs="1"/>
            <xs:element name="synchronization" type="d1:Synchronization" minOccurs="0" maxOccurs="1"/>
            <xs:element name="ping" type="d1:Ping" minOccurs="0" maxOccurs="1"/>
            <xs:element name="subject" type="d1:Subject" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>The Subject of this node, which can be repeated as needed.  
                    The Node.subject represents the identifier of the node that would be found in X.509 
                    certificates that would be used to securely communicate with this node.  Thus, it is
                    an X.509 Distinguished Name that applies to the host on which the Node is operating. 
                    When (and if) this hostname changes the new subject for the node would be added to the
                    Node to track the subject that has been used in various access control rules over time.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="contactSubject" type="d1:Subject" minOccurs="1" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>The appropriate person or group to contact regarding the disposition, 
                    management, and status of this Member Node. The Node.contactSubject is
                    an X.509 Distinguished Name for a person or group that can be used to look up current 
                    contact details (e.g., name, email address) for the contact in the DataONE Identity service.
                    DataONE uses the subjectContact to provide notices of interest to DataONE nodes, including 
                    information such as policy changes, maintenance updates, node outage notifications, among 
                    other information useful for administering a node. Each node that is registered with DataONE
                    must provide at least one subjectContact that has been verified with DataONE.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        
        <xs:attribute name="replicate" use="required" type="xs:boolean"/>
        <xs:attribute name="synchronize" use="required" type="xs:boolean"/>
        <xs:attribute name="type" use="required" type="d1:NodeType"/>
        <xs:attribute name="state" use="required" type="d1:NodeState" />
        
    </xs:complexType>
    
    <!-- Node List -->  
    <xs:complexType name='NodeList'>
        <xs:annotation><xs:documentation> A list of Node entries that is 
        returned by :func:`CNCore.listNodes()`.</xs:documentation>
            <xs:documentation>NodeList is described in :mod:`NodeList`.</xs:documentation></xs:annotation>
        <xs:sequence>
            <xs:element maxOccurs="unbounded" name="node" type="d1:Node" minOccurs="1"/>
        </xs:sequence>
    </xs:complexType>
    
    <!-- NodeReference -->
    <xs:complexType name="NodeReference">
      <xs:annotation>
      <xs:documentation>Member Node identifier drawn from the DataONE
      :mod:`cn_register &lt;registry service&gt;`.</xs:documentation>
      </xs:annotation>
       <xs:simpleContent>
            <xs:extension base="d1:NonEmptyString">
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>    
    
        <!-- Object Format -->
    <xs:complexType name="ObjectFormat">
      <xs:annotation>
          <xs:documentation>One value from the DataONE Object Format Vocabulary, 
          which is returned by :func:`CNCore.getFormat()`.</xs:documentation>
        <xs:documentation>An ObjectFormat is the structure returned from the 
        getFormat() method of the CN REST interface.  It provides the 
        unique identifier and the name associated with the object format.  
        Future versions may contain additional structured content from 
        external common typing systems.
        </xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element name="formatId" type="d1:ObjectFormatIdentifier" 
          minOccurs="1" maxOccurs="1">
          <xs:annotation>
              <xs:documentation>
                  The unique identifier of the object format in the DataONE
                  Object Format Vocabulary.  The identifier should comply with
                  DataONE Identifier rules, i.e. no whitespace, only UTF-8 or 
                  US-ASCII printable characters.
              </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="formatName" type="xs:string" 
          minOccurs="1" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              For objects that are typed using a Document Type Definition, 
              this lists the well-known and accepted named version of the DTD.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="formatType" type="xs:string" 
          minOccurs="1" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>A string field indicating whether or not this 
            format is science data(DATA), science metadata(METADATA) or a 
            resource map(RESOURCE).  If the format is a self-describing data 
            format that includes science metadata, then the field should also be 
            set to science metadata.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        
      </xs:sequence>
    </xs:complexType>    
    
    <!--  Object Format List -->
    <xs:complexType name="ObjectFormatList">
      <xs:annotation>  
        <xs:documentation>An ObjectFormatList is the structure returned from 
        the :func:`CNCore.listFormats()` method of the CN REST interface.  It 
        provides a list of named objectformats defined in the DataONE system.  
        Each ObjectFormat returned in the list describes the object format via 
        its  name, and future versions may contain additional structured content 
        from common external typing systems.
        </xs:documentation>
      </xs:annotation>    
      <xs:complexContent>
        <xs:extension base="d1:Slice">
          <xs:sequence>
            <xs:element name="objectFormat" type="d1:ObjectFormat"
              minOccurs="1" maxOccurs="unbounded" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
    
    <!-- Object Info -->
    <xs:complexType name="ObjectInfo">
        <xs:annotation>
            <xs:documentation>Metadata about an object, representing a subset of the
            metadata found in SystemMetadata.
        	</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="identifier"  type="d1:Identifier" minOccurs="1" maxOccurs="1"/>
            <xs:element name="formatId" type="d1:ObjectFormatIdentifier"/>
            <xs:element name="checksum" type="d1:Checksum"
                minOccurs="1" maxOccurs="1" />
            <xs:element name="dateSysMetadataModified" type="xs:dateTime"/>
            <xs:element name="size" type="xs:unsignedLong"/>
            
        </xs:sequence>
    </xs:complexType>
    
    <!-- Object List -->
    <xs:complexType name="ObjectList" >
        <xs:annotation>
            <xs:documentation>A list of Nodes object locations from which the object can be retrieved. 
        	</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="d1:Slice">
                <xs:sequence>
                    <xs:element name="objectInfo" type="d1:ObjectInfo" minOccurs="0" maxOccurs="unbounded" />
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- Object Location -->
    <xs:complexType name="ObjectLocation">
        <xs:annotation>
            <xs:documentation>Portion of an ObjectLocationList indicating the node from which the object
                can be retrieved. The principal information on each location is found in the nodeIdentifier; all
                other fields are provided for convenience, but could also be looked up from the Node list inforamtion.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="nodeIdentifier" type="d1:NodeReference"
                minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>Identifier of the node (the same identifier used
                        in the node registry for identifying the node).
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="baseURL" minOccurs="1" maxOccurs="1" type="xs:anyURI">
                <xs:annotation>
                    <xs:documentation>The current base URL for services implemented on the target node. Used with service version
                    to construct a URL for service calls to this node. Note that complete information on services
                    available on a Node is available from the :func:`CNCore.listNodes` service. 
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="version" minOccurs="1" maxOccurs="unbounded" type="d1:ServiceVersion">
                <xs:annotation>
                    <xs:documentation>The version of services implemented on the node.  Used with base url
                    to construct a URL for service calls to this node. Note that complete information on services
                    available on a Node is available from the :func:`CNCore.listNodes` service. 
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="url" minOccurs="1" maxOccurs="1" type="xs:anyURI">
                <xs:annotation>
                    <xs:documentation>The full (absolute) URL that can be used to
                        retrieve the object using the get() method of the rest interface.
                    </xs:documentation>
                    <xs:documentation>For example, if identifer
                        was "ABX154", and the node had a base URL of ``http://mn1.dataone.org/mn``
                        then the value would be ``http://mn1.dataone.org/mn/object/ABX154``</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="preference" minOccurs="0" maxOccurs="1" type="xs:int">
                <xs:annotation>
                    <xs:documentation>A weighting parameter that provides a hint to the caller 
                        for the relative preference for nodes from which the content should be retrieved.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    
    <!-- Object Location List -->
    <xs:complexType name="ObjectLocationList">
        <xs:annotation>
            <xs:documentation>An ObjectLocationList is the structure returned
                from the :func:`CNRead.resolve` method of the CN REST interface. It provides a
                list of locations from which the specified object can be retrieved.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="identifier" type="d1:Identifier"
                minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>The identifier of the object being resolved.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="objectLocation" type="d1:ObjectLocation"
                minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>List of nodes from which the object can be
                        retrieved</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    
    <!-- Person -->
	<xs:complexType name="Person">
		<xs:annotation>
			<xs:documentation>Person represents metadata about a Principal that
				is a person and that can be used by clients and nodes for
				:class:`Types.AccessPolicy` information. The mutable properties
				of a Person instance can only be changed by itself (i.e., the 
				Subject identifying the Person instance) and by the Coordinating
				Node identitiy, but can be read by any identity in the DataONE system.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="subject" type="d1:Subject" minOccurs="1"
				maxOccurs="1">
				<xs:annotation>
					<xs:documentation>The unique, immutable identifier for the person.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="givenName" type="d1:NonEmptyString"
				minOccurs="1" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>The given name of the Person.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="familyName" type="d1:NonEmptyString"
				minOccurs="1" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>The family name of the Person.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="email" type="d1:NonEmptyString"
				minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>The email address of the Person.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="isMemberOf" type="d1:Subject" minOccurs="0"
				maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>A group or role in which the Person is a
						member, expressed using the unique Subject identifier for that Group.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="equivalentIdentity" type="d1:Subject"
				minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>An alternative but equivalent identity for the
						principal that has been used in alternate identity systems.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="verified" type="xs:boolean" minOccurs="0"
				maxOccurs="1">
				<xs:annotation>
					<xs:documentation>True if the name and email address of the Person
						have been verified to ensure that the givenName and familyName
						represent the real person's legal name, and that the email 
						address is correct for that person and is in the control
						of the indicated individual. Verification occurs through a
						established procedure within DataONE as part of the Identity 
						Management system.  A Person can not change their own 'verified'
						field, but rather must be verified and changed through this DataONE
						established process.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<!-- Do we need further Person metadata? <xs:element name="institution" 
				type="d1:NonEmptyString" minOccurs="0" maxOccurs="unbounded"/> <xs:element 
				name="department" type="d1:NonEmptyString" minOccurs="0" maxOccurs="unbounded"/> 
				<xs:element name="address1" type="d1:NonEmptyString" minOccurs="0" maxOccurs="unbounded"/> 
				<xs:element name="address2" type="d1:NonEmptyString" minOccurs="0" maxOccurs="unbounded"/> 
				<xs:element name="city" type="d1:NonEmptyString" minOccurs="0" maxOccurs="unbounded"/> 
				<xs:element name="state" type="d1:NonEmptyString" minOccurs="0" maxOccurs="unbounded"/> 
				<xs:element name="zip" type="d1:NonEmptyString" minOccurs="0" maxOccurs="unbounded"/> -->
		</xs:sequence>
	</xs:complexType>

    <!-- Ping -->
    <xs:complexType name="Ping">
        <xs:annotation>
            <xs:documentation>Store results from the :func:`MNCore.ping` method.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="success" type="xs:boolean" >
            <xs:annotation>
                <xs:documentation>A boolean flag indicating TRUE if the node was reached by the last 
                    :func:`MNCore.ping` call, otherwise FALSE</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="lastSuccess" type="xs:dateTime" >
            <xs:annotation>
                <xs:documentation>
                    The date time value of the last time a successful ping was performed.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

  
    <!-- Replica -->
    <xs:complexType name="Replica">
        <xs:annotation>
            <xs:documentation>
                Replica information that describes the existence of a replica, and its status.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="replicaMemberNode" type="d1:NodeReference">
				<xs:annotation>
					<xs:documentation>
					A reference to the Member Node that houses this replica, regardless of
    whether it has arrived at the Member Node or not. See ReplicationStatus
    to determine if the replica is completely transferred.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
            <xs:element name="replicationStatus" type="d1:ReplicationStatus">
				<xs:annotation>
					<xs:documentation>
					The current status of this replica, describing where the replica is
					in the replication process.  Only 'completed' replicas shoud be
					considered as available.
					</xs:documentation>
				</xs:annotation>
			</xs:element>            
            <xs:element name="replicaVerified" type="xs:dateTime">
				<xs:annotation>
					<xs:documentation>
					The last date and time on which the integrity of a replica was
					verified by the coordinating node.  Verification occurs by checking
					that the checksum of the stored object matches the cehcksum recorded for
					the object in the system metadata.
					</xs:documentation>
				</xs:annotation>
			</xs:element>     
        </xs:sequence>
    </xs:complexType>
    
    
   <!-- Replication Policy -->
    <xs:complexType name="ReplicationPolicy">
        <xs:annotation>
            <xs:documentation>
                The replication policy for an object defines if replication should be
                attempted for this object, and if so, how many rpelicas should be maintained.
                It also permits specification of preferred and blocked nodes as potential
                replication targets.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="preferredMemberNode" type="d1:NodeReference"
                minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
                <xs:documentation>Preferred Nodes are utilized over other nodes as 
                    replication targets, up to the number of replicas requested.  If preferred
                    nodes are unavailable, or if insufficient nodes are listed as preferred to meet
                    the requested number of replicas, then the Coordinating Nodes will pick additional
                    replica nodes for the content.
                </xs:documentation>
            </xs:annotation>    
            </xs:element>
            <xs:element name="blockedMemberNode" type="d1:NodeReference"
                minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>The object MUST never be replicated to nodes 
                        listed as blockedMemberNodes. Where there is a conflict between 
                        a preferredMemberNode and a blockedMemberNode entry, the 
                        blockedMemberNode entry prevails.
                    </xs:documentation>
                </xs:annotation>                
            </xs:element>
        </xs:sequence>
        <xs:attribute name="replicationAllowed" type="xs:boolean" />
        <xs:attribute name="numberReplicas" type="xs:int"/>
    </xs:complexType>
    
    <!-- Service -->
    <xs:complexType  name="Service">
        <xs:annotation>
            <xs:documentation>The available Dataone Service APIs that are exposed on a Node.
                Name and version of a DataONE software stack component are
                equivalent to the statusresponselist.xsd name and version. 
                Without a restriction, all service methods are available to all callers.
                Restrictions may be placed on individual methods of the service to limit 
                the service to a certain set of Subjects. Enforcement of these service restrictions
                is incumbent on the Node service implementation.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="restriction" type="d1:ServiceMethodRestriction" minOccurs="0" maxOccurs="unbounded" /> 
      </xs:sequence>    
      <xs:attribute name="name" type="d1:ServiceName" use="required" />
        <xs:attribute name="version" type="d1:ServiceVersion" use="required"/>
        <xs:attribute name="available" type="xs:boolean"/>
        
    </xs:complexType>
    
    <!-- Service Method Restriction -->
	<xs:complexType name="ServiceMethodRestriction">
		<xs:annotation>
			<xs:documentation>Describes an optional restriction policy for a
				given method. If this element exists for a service method, its use is restricted,
				and only Subjects listed in the allowed list are allowed to invoke the method named
				in the 'methodName' attribute.
            </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="d1:SubjectList">
				<xs:attribute name="methodName" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>The formal name of the method in this Service
						which is to be restricted.
            			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
    
    <!-- Services -->
    <xs:complexType  name="Services">
    	<xs:annotation>
            <xs:documentation>A list of services that are provided by a node.  Used in Node descriptions so that 
            Nodes can provide metadata about each service they implement and support. 
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="service" type="d1:Service" minOccurs="1" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>
    
    <!-- Session -->
    <xs:complexType  name="Session">
        <xs:annotation>
            <xs:documentation>
            	Information about the authenticated session for a service transaction.  Session data
                is retrieved from the SSL client certificate and populated in the Session object.  The
                subject represents the person or system that authenticated successfully, and the subjectInfo
                contains a listing of alternate identities (both Persons and Groups) that are also valid identities
                for this user.  The subjectInfo should include at least one Person or Group entry that provides
                the attributes of the subject that was authenticated. 
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="subject" type="d1:Subject" minOccurs="1" maxOccurs="1" />
            <xs:element name="subjectInfo" type="d1:SubjectInfo" minOccurs="0" maxOccurs="1" />
        </xs:sequence>
    </xs:complexType>
    
    <!-- Schedule -->
    <xs:complexType name="Schedule">
        <xs:annotation>
            <xs:documentation>The schedule on which MnSynchronization will run for a particular run. Syntax for each time slot
            follows the syntax conventions defined by the Quartz Scheduler (http://www.quartz-scheduler.org/api/2.1.0/org/quartz/CronExpression.html)
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="hour" use="required" type="d1:CrontabEntry"/>
        <xs:attribute name="mday" use="required" type="d1:CrontabEntry"/>
        <xs:attribute name="min"  use="required" type="d1:CrontabEntry"/>
        <xs:attribute name="mon"  use="required" type="d1:CrontabEntry"/>
        <xs:attribute name="sec"  use="required" type="d1:CrontabEntry"/>
        <xs:attribute name="wday" use="required" type="d1:CrontabEntry"/>
        <xs:attribute name="year" use="required" type="d1:CrontabEntry"/>
    </xs:complexType>
    
    <!-- Slice -->
    <xs:complexType name="Slice">
    <xs:annotation>
            <xs:documentation>An abstract type used as a common base for other types that need to include count, start, and total
            attributes to indicate which slice of a list is represented by a set of records.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="count" use="required" type="xs:int"/>
        <xs:attribute name="start" use="required" type="xs:int"/>
        <xs:attribute name="total" use="required" type="xs:int"/>
    </xs:complexType>
    
    <!-- Synchronization -->
    <xs:complexType name="Synchronization">
        <xs:annotation>
            <xs:documentation>Configuration information for the process by which data is harvested from membernodes
                to Coordinating Nodes, including the schedule on which harvesting should occur, and metadata about
                the last synchronization attempts for the node.  Clients providing Synchronization
                information only need to provide the schedule, but must provide placeholder values that will be overridden 
                by the Coordinating Nodes for the lastHarvested and lastCompleteHarvest fields.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="schedule" type="d1:Schedule" minOccurs="1" maxOccurs="1"/>
            <xs:element name="lastHarvested" type="xs:dateTime" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>The most recent modification date of objects checked during the last harvest of the node.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="lastCompleteHarvest" type="xs:dateTime" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>The last time all the data from a node was pulled from a member node. 
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!-- Subject = user identity -->
    <xs:complexType name="Subject">
      <xs:annotation>
        <xs:documentation>The identifier for a Person (user), Group, Organization, or System.</xs:documentation>
        <xs:documentation>The formal name identifiying a user or group from the DataONE 
  Identity Management Service. The subject is represented by a unique,
  persistent, non-reassignable identifier string that follows the same
  constraints as Identifier.</xs:documentation>
        <xs:documentation>Used by :mod:`SystemMetadata`</xs:documentation>
      </xs:annotation>
       <xs:simpleContent>
            <xs:extension base="d1:NonEmptyString">
        <!-- Note: Can also be special symbolic principals:
             verifiedUser: anyone with checked credentials for whom their real name and email has been verified
             authenticatedUser: anyone with checked credentials
             public: anyone, whether authenticated or not
        -->
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    
    <!-- SubjectInfo -->
    <xs:complexType name="SubjectInfo">
        <xs:annotation>
            <xs:documentation>
                A List of subjects, including both Persons and Groups, that is returned
                from the getSubjectInfo service and listSubjects service.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="person" type="d1:Person"
                minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="group" type="d1:Group"
                minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    
    <!-- SubjectList -->  
    <xs:complexType name='SubjectList'>
        <xs:annotation>
        	<xs:documentation> A list of Subjects used for identity/group management</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element maxOccurs="unbounded" name="subject" type="d1:Subject" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>
        
    <!-- Definition of the SystemMetdata element -->
    <xs:complexType name="SystemMetadata">
        <xs:annotation>
            <xs:documentation>
                System metadata (often referred to as :term:`sysmeta`) is the information used
				by DataONE to track and manage objects across the distributed Coordinating and
				Member Nodes of the network. System metadata documents contain low level
				information (e.g. size, type, owner, access control rules) about managed objects
				such as science data, science metadata, and resource map objects and the
				relationships between objects (e.g. obsoletes and obsoletedBy).

				The information is maintained dynamically by Coordinating Nodes and is mutable
				in that it reflects the current state of an object in the system. Initial
				properties of system metadata are generated by clients and Member Nodes. After
				object synchronization, the Coordinating Nodes hold authoritative copies of
				system metadata. Mirror copies of system metadata are maintained at each of the
				Coordinating nodes.

				System metadata are considered operational information needed to run DataONE,
				and can be read by all Coordinating Nodes and Member Nodes in the course of
				service provision. In order to reduce issues with third-party tracking of data
				status information, users can read system metadata for an object if they have
				the access rights to read the corresponding object which a system metadata
				record describes.

				System Metadata elements are partitioned into two classes: metadata elements
				that must be provided by client software to the DataONE system, and elements
				that are generated by DataONE itself in the course of managing objects.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <!-- Client Provided system metadata fields -->
            <xs:element name="serialVersion" type="xs:unsignedLong" minOccurs="1" maxOccurs="1">
            	<xs:annotation>
            		<xs:documentation>
            		A serial number maintained by the coordinating node it indicate when
            		changes have occurred to SystemMetadata to avoid update conflicts. Clients
            		should ensure that they have the most recent version of a SystemMetadata
            		document before attempting to update, otherwise an error will be thrown to
            		prevent conflicts.
            		</xs:documentation>
            	</xs:annotation>
            </xs:element>
            <xs:element name="identifier" type="d1:Identifier">
            	<xs:annotation>
            		<xs:documentation>
            		The identifier of the object that is described by this system metadata document.

  					The unique Unicode string that is used to canonically name and identify the
  					object in DataONE. Each object in DataONE is immutable, and therefore all
  					objects must have a unique Identifier. If two objects are related to one
  					another (such as one object is a more recent version of another object), each
  					of these two objects will have unique identifiers. The relationship among the
  					objects is specified in other metadata fields (see Obsoletes and ObsoletedBy),
  					but this does not preclude the inclusion of version information in the
  					identifier string. However, DataONE treats all Identifiers as opaque and will
  					not try to infer versioning semantics based on the content of the Identifiers
  					-- rather, this information is found in the Obsoletes and ObsoletedBy fields.

  					Note that identifiers are used in a number of REST API calls as parts of the
  					URL path. As such, all special characters such as "/", " ", "+", "\", "%"
  					must be properly encoded, e.g. "%2F", "%20", "%2B", "%5C", "%25"
  					respectively when used in REST method calls. See RFC3896_ for more details.
  					For example, the getObject() call for an object with identifier::

    				http://some.location.name/mydata.cgi?id=2088

  					would be::

    				http://mn1.server.name/mn/http:%2F%2Fsome.location.name%2Fmydata.cgi%3Fid%3D2088
            
					.. _RFC3896: http://www.ietf.org/rfc/rfc3896.txt
            		</xs:documentation>
            	</xs:annotation>
            </xs:element>
            <xs:element name="formatId" type="d1:ObjectFormatIdentifier">
            	<xs:annotation>
            		<xs:documentation>
            		Designation of the standard or format that should be used to interpret the
  					contents of the object, drawn from controlled list of formats that are provided by the DataONE
  					ObjectFormat service. DataONE maintains a list of formats in use and their
  					canonical FormatIdentifiers. The format identifier for an object should
  					imply its mime type for data objects and metadata type and serialization
  					format for metadata objects. Examples include the namespace of the EML 2.1
  					metadata specification, the DOCTYPE of the Biological Data Profile, the mime
  					type of text/csv files, and the canonincal name of the NetCDF specification.
            		</xs:documentation>
            	</xs:annotation>
            </xs:element>
            <xs:element name="size" type="xs:unsignedLong">
            	<xs:annotation>
            		<xs:documentation>
            		The size of the object in bytes.
            		</xs:documentation>
            	</xs:annotation>
            </xs:element>
            <xs:element name="checksum" type="d1:Checksum">
            	<xs:annotation>
            		<xs:documentation>
            		A calculated hash value used to validate object integrity over time and
  					after network transfers. The value is calculated using a standard hashing
  					algorithm that is accepted by DataONE and that is indicated in
  					the included ChecksumAlgorithm attribute.
            		</xs:documentation>
            	</xs:annotation>
            </xs:element>
            
            <xs:element name="submitter" type="d1:Subject">
            	<xs:annotation>
            		<xs:documentation>
            		Subject who submitted the associated abject to the DataONE Member Node. The
  					Submitter is by default the RightsHolder if a RightsHolder has not been specified.
            		</xs:documentation>
            	</xs:annotation>
            </xs:element>
            <xs:element name="rightsHolder" type="d1:Subject">
            	<xs:annotation>
            		<xs:documentation>
            		Subject that has ultimate authority for object and is authorized to make all
  					decisions regarding the disposition and accessibility of the object. The
  					rightsHolder has all rights to access the object, update the object, and grant
  					permissions for the object, even if additional access control rules are not
  					specified for the object.
            		</xs:documentation>
            	</xs:annotation>
            </xs:element>
            <xs:element name="accessPolicy" type="d1:AccessPolicy"
                minOccurs="0" maxOccurs="1" >
            	<xs:annotation>
            		<xs:documentation>
            		The accessPolicy determines which Subjects are allowed to make changes to
            		an object in addition to the RightsHolder and AuthoritativeMemberNode.
            		The accessPolicy is set for an object during a create() or update() call, or
            		when SystemMetadata is updated on the Coordinating Node via various mechanisms.
  					This policy replaces any existing policies that might exist for the object.
  					Member Nodes that house an object are obligated to enforce the accessPolicy for
  					that object.
            		</xs:documentation>
            	</xs:annotation>
            </xs:element>
            <xs:element name="replicationPolicy" type="d1:ReplicationPolicy"
                minOccurs="0" maxOccurs="1" >
            	<xs:annotation>
            		<xs:documentation>
            		A controlled list of policy choices that determine how many replicas
  					should be maintained for a given object and any preferences or
  					requirements as to which Member Nodes should be allowed to house the
  					replicas that are created. The policy determines whether replication is allowed, the
  					number of replicas desired, the list of preferred nodes to hodl the replicas, and a 
  					list of blocked nodes on which replicas must not exist.
            		</xs:documentation>
            	</xs:annotation>
            </xs:element>
            
            <xs:element name="obsoletes" type="d1:Identifier" minOccurs="0" maxOccurs="1">
            	<xs:annotation>
            		<xs:documentation>
            		The Identifier of an object that is a prior version of the object
  					described in this system metadata record and that is obsoleted by this object. When an 
  					object is obsoleted, it is removed from all DataONE search indices but is
  					still accessible from the :func:`CNRead.get` service.
            		</xs:documentation>
            	</xs:annotation>
            </xs:element>
            <xs:element name="obsoletedBy" type="d1:Identifier" minOccurs="0" maxOccurs="1">
            	<xs:annotation>
            		<xs:documentation>
            		The Identifier of an object that is a subsequent version of the object
  					described in this system metadata record and that therefore obsoletes this 
  					object. When an object is obsoleted, it is removed from all DataONE search indices but is
  					still accessible from the :func:`CNRead.get` service.
            		</xs:documentation>
            	</xs:annotation>
            </xs:element>
            <xs:element name="archived" type="xs:boolean" minOccurs="0" maxOccurs="1">
        		<xs:annotation>
            		<xs:documentation>A boolean flag, set to 'true' if the object has been classified
            		as archived. An archived object does not show up in search indexes in DataONE, but
            		is still accessible via the CNRead and MNRead services if associated access polices
            		allow. The field is optional, and if absent, then objects are implied to not be archived,
            		which is the same as setting archived to false.
            		</xs:documentation>
        		</xs:annotation>
			</xs:element>
                            
            <xs:element name="dateUploaded" type="xs:dateTime">
            	<xs:annotation>
            		<xs:documentation>
            		Date and time (UTC) that the object was uploaded into the DataONE system,
  					which is typically the time that the object is first created on a Member
  					Node using the 'create()' operation. Note this is independent of the 
  					publication or release date of the object.
            		</xs:documentation>
            	</xs:annotation>
            </xs:element>
            <xs:element name="dateSysMetadataModified" type="xs:dateTime">
            	<xs:annotation>
            		<xs:documentation>
            		Date and time (UTC) that this system metadata record was last modified in the 
  					DataONE system. This is the same timestamp as DateUploaded until the system
  					metadata is further modified.
            		</xs:documentation>
            	</xs:annotation>
            </xs:element>            
            <xs:element name="originMemberNode" type="d1:NodeReference" minOccurs="0" maxOccurs="1">
            	<xs:annotation>
            		<xs:documentation>
            		A reference to the Member Node that originally uploaded the associated
  					object. This value should never change, even if the Member Node ceases to exist.
            		</xs:documentation>
            	</xs:annotation>
            </xs:element>
            <xs:element name="authoritativeMemberNode" type="d1:NodeReference" minOccurs="0" maxOccurs="1">
            	<xs:annotation>
            		<xs:documentation>
            		A reference to the Member Node that acts as the authoritative source for
  					an object in the system. The AuthoritativeMemberNode will often also be the 
  					OriginMemberNode, unless there has been a need to transfer authority for
  					an object to a new node, such as when a Member Node becomes defunct.
  					Replication should occur from the AuthoritativeMemberNode.  The Authoritative Member Node
  					has all the rights of the RightsHolder to maintain and curate the object, inlcuding making any
  					changes necessary.
            		</xs:documentation>
            	</xs:annotation>
            </xs:element>
            <xs:element name="replica" maxOccurs="unbounded" minOccurs="0" type="d1:Replica">
            	<xs:annotation>
            		<xs:documentation>
            		A container field used to repeatedly provide several metadata fields about 
  					each replica that exists in the system, or is being replicated. Note that
  					a Replica field exists even for the Authoritative/Origin Member Nodes so
  					that the status of those objects can be tracked.
            		</xs:documentation>
            	</xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    
    <!-- ******************************************
            DEFINE ROOT ELEMENTS OF MESSAGES HERE 
            ****************************************** -->
    <!-- NOTE THAT ALL SERIALIZEABLE ROOT ELEMENTS FOR MESSAGES SHOULD BE OF A COMPLEX TYPE -->   
    
    <!-- These root-level element definitions are provided for selected types so that
         those types can be used in serialized messages in method calls in DataONE. Any
         type that is included as a parameter to or a return type from a DataONE service should
         have a corresponding root element of that type defined here. 
    -->
    <xs:element name="accessPolicy" type="d1:AccessPolicy" />

    <xs:element name="checksum" type="d1:Checksum" />
        
    <xs:element name="identifier" type="d1:Identifier" />
    
    <xs:element name="log" type="d1:Log" />
        
    <xs:element name="monitorList" type="d1:MonitorList" />
    
    <xs:element name='nodeList' type="d1:NodeList"/>
    
    <xs:element name='node' type="d1:Node"/>
    
    <xs:element name="objectList" type="d1:ObjectList" />
    
    <xs:element name="objectLocationList" type="d1:ObjectLocationList" />
        
    <xs:element name="objectFormat" type="d1:ObjectFormat" />

    <xs:element name="objectFormatList" type="d1:ObjectFormatList" />
    
    <xs:element name="nodeReference" type="d1:NodeReference" />
    
    <xs:element name="person" type="d1:Person" />
    
    <xs:element name="replica" type="d1:Replica" />
    
    <xs:element name="replicationPolicy" type="d1:ReplicationPolicy" />
    
    <xs:element name="session" type="d1:Session" />

    <xs:element name="subject" type="d1:Subject" />

    <xs:element name="subjectList" type="d1:SubjectList" />
    
    <xs:element name="subjectInfo" type="d1:SubjectInfo" />

    <xs:element name="systemMetadata" type="d1:SystemMetadata" />
    
</xs:schema>
